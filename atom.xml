<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>皮之鲲</title>
  
  <subtitle>总不能还没努力就向生活妥协</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-14T09:15:17.411Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>皮皮鲲</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件测试</title>
    <link href="http://yoursite.com/2020/06/14/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2020/06/14/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</id>
    <published>2020-06-14T06:27:41.000Z</published>
    <updated>2020-06-14T09:15:17.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="软件测试——基本知识"><a href="#软件测试——基本知识" class="headerlink" title="软件测试——基本知识"></a>软件测试——基本知识</h1><h2 id="软件测试的定义"><a href="#软件测试的定义" class="headerlink" title="软件测试的定义"></a>软件测试的定义</h2><p>​        <strong>软件测试是人工的或通过使用工具来自动的运行被测软件系统，或静态检查被测系统的过程，其目的在于校验被测系统是否满足需求，或要弄清楚实际的 系统输出与预期系统输出的差异。</strong></p><p><img src="/2020/06/14/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/ruanjianceshidingyi.png" alt="软件测试"></p><p>​        从中可以看出<strong>软件测试的目的是确保被测系统满足用户需求。</strong></p><ul><li><p>软件测试以需求为中心。</p></li><li><p>软件测试包括动态测试和静态检查两类方法</p></li><li><p>测试的执行包括人工和自动化两类策略</p><p>动态（手工）测试：</p><ul><li>提供被测对象</li><li>准备相关的预期（文档）</li><li>设计测试用例</li><li>搭建测试环境</li><li>运行测试用例</li><li>检查测试结果</li><li>记录测试的过程</li><li>报告缺陷</li><li>回归测试</li><li>交付的文件：测试用例，驱动/桩模块，缺陷报告</li></ul><p>静态测试：</p><ul><li><p>提供被测对象（源代码）</p></li><li><p>准备相关的预期（文档）</p></li><li><p>阅读代码和文档</p></li><li><p>报告缺陷</p></li><li><p>回归测试</p></li></ul><p>自动化测试：</p><ul><li>提供被测对象</li><li>准备相关的预期（文档）</li><li>设计测试用例（编写测试脚本）</li><li>搭建测试环境（增加了对测试环境的配置）</li><li>运行测试用例</li><li>检查测试结果</li><li>记录测试的过程</li><li>报告缺陷</li><li>回归测试</li><li>交付的文件：测试用例，驱动/桩模块，缺陷报告，测试脚本</li></ul></li></ul><h2 id="软件测试的流程"><a href="#软件测试的流程" class="headerlink" title="软件测试的流程"></a>软件测试的流程</h2><h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><p>​        回答哪些人分别在什么时候使用哪些方法，利用哪些资源，遵循哪些标准，对系统中的哪些对象进行测试，在这个过程中可能存在哪些风险。</p><ul><li><p>输入</p><ul><li><p>需求规格说明</p></li><li><p>项目计划</p></li></ul></li><li><p>输出</p><ul><li>测试计划</li></ul></li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>​        根据用户的寻求、系统设计文档和测试计划，设计测试用例和测试过。</p><ul><li><p>输入</p><ul><li><p>需求</p></li><li><p>设计文档</p></li><li><p>测试计划</p></li></ul></li><li><p>输出</p><ul><li>测试用例</li><li>测试过程</li></ul></li></ul><h3 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h3><p>​        回答如何让测试用例跑起来，被测软件中发现了什么问题。根据测试用例设计模块，手工执行，或者根据测试用例编写测试脚本并运动，检查每一个结果，发现缺陷后提交缺陷报告。</p><ul><li><p>输入</p><ul><li><p>需求</p></li><li><p>测试用例</p></li><li><p>测试过程</p></li></ul></li><li><p>输出</p><ul><li>测试驱动模块</li><li>测试桩模块</li><li>测试脚本（可选）</li></ul></li></ul><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><p>​    评估测试工作和被测系统，目的是回答测试工作质量怎么样，被测系统质量怎么样。</p><ul><li><p>输入</p><ul><li><p>缺陷报告</p></li><li><p>测试用例</p></li><li><p>测试标准</p></li></ul></li><li><p>输出</p><ul><li>测试评估报告</li></ul></li></ul><h2 id="软件缺陷"><a href="#软件缺陷" class="headerlink" title="软件缺陷"></a>软件缺陷</h2><h3 id="软件缺陷的定义"><a href="#软件缺陷的定义" class="headerlink" title="软件缺陷的定义:"></a>软件缺陷的定义:</h3><p><img src="/2020/06/14/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/%E8%BD%AF%E4%BB%B6%E7%BC%BA%E9%99%B7" alt="1592125966360"></p><p><strong>1.软件测试人员认为软件难以理解、不易使用、运行速度缓慢，或者最终用户认为不好就是缺陷。</strong></p><p><strong>2.软件未达到需求规格说明书中指明的功能，就是缺陷</strong>。</p><ul><li>保证实现有效输入下的基本功能；</li><li>保证达到相关性能指标</li></ul><p><strong>3.软件出现了需求规格说明书中指明不会出现的错误，就是缺陷（这可视为对软件系统容错性的要求【容错性主要是依赖于测试人员的经验】）。</strong></p><ul><li>系统能否处理异常情况</li><li>系统能否识别用户输入的无效数据</li><li>系统能否处理用户无效的输入数据</li></ul><p><strong>4.软件功能超出需求规格说明书中指明的范围，就是缺陷</strong></p><ul><li>程序员错误的实现了需求规定的功能</li><li>需求规格说明有遗漏，但是程序员完成了</li><li>人为加入的一些超出需求规格说明书的功能（意外或者病毒）</li></ul><p><strong>5.软件未达到需求规格说明书中虽然没有指出，但是应该达到的目标，就是缺陷</strong></p><ul><li>软件的一些隐含的特性（一些对于异常的处理，或者与用户相关专业有关）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="软件测试" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://yoursite.com/2020/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2020/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-06-14T06:16:04.389Z</published>
    <updated>2020-06-02T07:15:34.623Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h1><p><strong>程序 = 数据结构 + 算法</strong></p><h2 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1.数据结构"></a>1.数据结构</h2><p><strong>数据结构包括：</strong></p><p><strong>1.线性结构</strong></p><p>1.线性结构是最常用的数据结构，其特点是数据元素之间存在一对一的线性关系（比如：a[0]=10，这就是一对一的关系）</p><p>2.线性数据结构有两个存储的结构：顺序储存（顺序表，存储的地址是连续的），链式存储（链表，存储元素不一定是连续的）</p><p>3.线性结构常见的有：数组，队列，链表和栈</p><p><strong>2.非线性结构</strong></p><p>简单来说就是一个节点元素 可能有多个直接前驱和多个直接后继 （这其实是一个数学用语）</p><p>常见的有：二维数组，多维数组，广义表，树结构，图结构</p><h2 id="2-稀疏数组"><a href="#2-稀疏数组" class="headerlink" title="2.稀疏数组"></a>2.稀疏数组</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>​        我在二维数组中，数值为0的元素个数，或者数值相同的数远远大于非0元素的个数，货不同值的个数。可以将这样的一个数组进行压缩，把出现的元素值记录在一个小规模的数组中，这个小规模的数组就是稀疏数组。</p><h3 id="2-处理方式"><a href="#2-处理方式" class="headerlink" title="2.处理方式"></a>2.处理方式</h3><p>1.记录数组一共有几行几列，有多少个不同的值</p><p>2.把具有不同值的元素的行列以及值记录在一个小规模的数组中，从而缩小程序的规模</p><p><img src="/2020/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1590585652422.png" alt="1590585652422"></p><p>3.将二维数组转化为稀疏数组的思路</p><ul><li>​    遍历原始的二维数组，得到有效数据的个数sum</li><li>​    根据sum就可以创建稀疏数组 Arr[sum+1,3]</li><li>将二维数组的有效数据存入到稀疏数组中</li></ul><p>4.稀疏数组转化到原始的二维数组思路</p><ul><li><p>​    读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数据（就是原始二维数组有多少行，多少列，多少个有效的数据）</p></li><li><p>​    在读取稀疏数组后几行的数据并赐给原始的二维数组即可</p><h3 id="3-代码分析"><a href="#3-代码分析" class="headerlink" title="3.代码分析"></a>3.代码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个原始的二维数组</span></span><br><span class="line"><span class="comment">//0：表示没有，1：表示黑子，2：表示篮子</span></span><br><span class="line"><span class="keyword">int</span> chessArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">chessArr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">chessArr[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//输出原始的二维数组</span></span><br><span class="line">System.out.println(<span class="string">"原始的二维数组"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] is : chessArr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : is) &#123;</span><br><span class="line">System.out.print(i+<span class="string">"\t"</span>);;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将二维数组得到非0数据的个数</span></span><br><span class="line"><span class="comment">//1.先遍历二维数组得到非0数据的个数</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] arr:chessArr)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n:arr)&#123;</span><br><span class="line"><span class="keyword">if</span> (n!=<span class="number">0</span>) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.创建稀疏数组</span></span><br><span class="line"><span class="keyword">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//3.给稀疏数组赋值(第一行关)</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>] = chessArr.length;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>] = chessArr[<span class="number">0</span>].length;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"><span class="comment">//4.将原来二维数组中的不同的值给稀疏数组</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;chessArr.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;chessArr[i].length;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (chessArr[i][j]!=<span class="number">0</span>) &#123;</span><br><span class="line">n++;</span><br><span class="line">sparseArr[n][<span class="number">0</span>] = i;</span><br><span class="line">sparseArr[n][<span class="number">1</span>] = j;</span><br><span class="line">sparseArr[n][<span class="number">2</span>] = chessArr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.输出稀疏数组</span></span><br><span class="line">System.out.println(<span class="string">"这是稀疏数组"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] is : sparseArr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : is) &#123;</span><br><span class="line">System.out.print(i+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将稀疏数组恢复成为原始的二维数组</span></span><br><span class="line"><span class="comment">//1.读取稀疏数组的第一行，获取原始数组的行和列,并创建数组</span></span><br><span class="line"><span class="keyword">int</span> newArry[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="comment">//2.便利稀疏数组获取值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;sparseArr.length;i++) &#123;</span><br><span class="line">newArry[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.输出原始的二维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] is : newArry) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : is) &#123;</span><br><span class="line">System.out.print(i+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-队列"><a href="#3-队列" class="headerlink" title="3.队列"></a>3.队列</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><ul><li><p>队列是一个有序列表，可以用数组和链表来实现。</p></li><li><p>遵循<strong>先入先出</strong>的原则</p></li></ul><h3 id="2-用数组模拟队列（思路）"><a href="#2-用数组模拟队列（思路）" class="headerlink" title="2.用数组模拟队列（思路）"></a>2.用数组模拟队列（思路）</h3><ul><li><p>使用maxSize代表队列的最大容量</p></li><li><p>使用front代表队列的前端：会随着队列的输出而改变</p></li><li><p>使用rear代表队列的后端：会随着队列数据的输入而改变</p><p><img src="/2020/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1590661140312.png" alt="1590661140312"></p></li></ul><h4 id="1-入队（addQueue）"><a href="#1-入队（addQueue）" class="headerlink" title="(1)入队（addQueue）"></a>(1)入队（addQueue）</h4><p>a.思想：</p><ul><li>将尾指针往后移：rear+1 [当rear == front的时候队列为空]</li><li>若尾指针rear小于队列的最大小标maxSize-1的时候，则将数据存入到rear所指向的数组元素中，否则就无法存入数据【rear == maxSize-1的时候队列满员】</li><li>注意只能在队尾添加数据，不能在队的头部添加数据</li></ul><h4 id="（2）出队（getQueue）"><a href="#（2）出队（getQueue）" class="headerlink" title="（2）出队（getQueue）"></a>（2）出队（getQueue）</h4><ul><li>先判断队列是否为空[当rear == front的时候队列为空]</li><li>将头部的指针向前移动一个</li><li>将数据取出到队列中</li></ul><h4 id="（3）查看队列（showQueue）"><a href="#（3）查看队列（showQueue）" class="headerlink" title="（3）查看队列（showQueue）"></a>（3）查看队列（showQueue）</h4><ul><li>判断队列是否为空</li><li>循环便利队列并输出</li></ul><h3 id="3-用数组模拟队列（代码）"><a href="#3-用数组模拟队列（代码）" class="headerlink" title="3.用数组模拟队列（代码）"></a>3.用数组模拟队列（代码）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueueDemo</span></span>&#123;</span><br><span class="line"><span class="comment">//表示数组的最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"><span class="comment">//队列中的头</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line"><span class="comment">//队列中的尾部</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line"><span class="comment">//队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用构造器设置队列的相关属性（队列默认为空）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayQueueDemo</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[arrMaxSize];</span><br><span class="line">front = -<span class="number">1</span>;<span class="comment">//对象的头部，只想队列的前一个位置</span></span><br><span class="line">rear = -<span class="number">1</span>;<span class="comment">//对象的尾部，指向队列尾部的数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否满员</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == maxSize-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否相等</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加数据到队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="comment">//1.先判断队列是否满员</span></span><br><span class="line"><span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列已经满了，不能加入数据"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//2.将尾部的指针向前移动一个</span></span><br><span class="line">rear++;</span><br><span class="line"><span class="comment">//3.将数据存入到队列中</span></span><br><span class="line">arr[rear] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.先判断队列是否满员</span></span><br><span class="line"><span class="keyword">if</span> (isNull()) &#123;</span><br><span class="line"><span class="comment">//抛出异常（必须用try..cath获取异常）</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空"</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//2.将头部的指针向前移动一个</span></span><br><span class="line">front++;</span><br><span class="line"><span class="comment">//3.将数据取出到队列中</span></span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列中的所有的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历队列</span></span><br><span class="line"><span class="keyword">if</span>(isNull())&#123;</span><br><span class="line">System.out.println(<span class="string">"队列为空"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = front+<span class="number">1</span>;i&lt;rear+<span class="number">1</span>;i++)&#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列的头数据，注意不是取出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isNull()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-用数组模拟队列（问题和优化）"><a href="#4-用数组模拟队列（问题和优化）" class="headerlink" title="4.用数组模拟队列（问题和优化）"></a>4.用数组模拟队列（问题和优化）</h3><p>1）目前数组只能使用一次就不能用了，没有达到复用的效果</p><p>2）将这个数组使用算法，改进成为一个<strong>环形的队列</strong> 【取模】</p><h4 id="（1）使用数组模拟环形队列【思想】"><a href="#（1）使用数组模拟环形队列【思想】" class="headerlink" title="（1）使用数组模拟环形队列【思想】"></a>（1）使用数组模拟环形队列【思想】</h4><ul><li><p>front变量的含义做出一个调整:front就指向队列的第一个元素，arr[front] 就是队列的第一个元素,front的初始值为0</p></li><li><p>rear变量的含义做出一个调整：rear执行队列的最后一个元素的后一个【留出一个空间做约定】，rear的初始值也是0</p></li><li><p>当队列满的时候【(rear+1)%maxSize == front】</p></li><li><p>当队列为空的条件：rear == front </p></li><li><p>队列中的有效的数据的个数：(rear + maxSize - front) % maxSize</p></li><li><p><strong>因为是环形队列，所以有可能出现rear小于front的情况（如图所示），所以不能直接使用加减法去判断队列满和有效的数据个数，只能通过取模的方式去判断。</strong></p></li></ul><p><img src="/2020/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1590744670967.png" alt="1590744670967"></p><h4 id="（1）使用数组模拟环形队列【代码】"><a href="#（1）使用数组模拟环形队列【代码】" class="headerlink" title="（1）使用数组模拟环形队列【代码】"></a>（1）使用数组模拟环形队列【代码】</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用数组</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CriCleArrayQueueDemo</span></span>&#123;</span><br><span class="line"><span class="comment">//表示数组的最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"><span class="comment">//队列中的头</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line"><span class="comment">//队列中的尾部</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line"><span class="comment">//队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用构造器设置队列的相关属性（队列默认为空）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CriCleArrayQueueDemo</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[arrMaxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否满员</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (rear + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否相等</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加数据到队列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="comment">//1.先判断队列是否满员</span></span><br><span class="line"><span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列已经满了，不能加入数据"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//2.将数据传入到队列</span></span><br><span class="line">arr[rear] = n;</span><br><span class="line"><span class="comment">//3.转移rear</span></span><br><span class="line">rear = (rear+<span class="number">1</span>)% maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.先判断队列是否满员</span></span><br><span class="line"><span class="keyword">if</span> (isNull()) &#123;</span><br><span class="line"><span class="comment">//爆出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"队列空"</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//front指向队列的第一个元素</span></span><br><span class="line"><span class="comment">//2.将front的对应的值保存到一个临时变量</span></span><br><span class="line"><span class="keyword">int</span> n = arr[front];</span><br><span class="line"><span class="comment">//3.将frot后移（当全部的数据全部取出的时候）</span></span><br><span class="line">front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line"><span class="comment">//4.将临时保存的变量返回</span></span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列中的所有的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="keyword">if</span>(isNull())&#123;</span><br><span class="line">System.out.println(<span class="string">"队列为空"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从front开始便利</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = front;i&lt;size()+front;i++)&#123;</span><br><span class="line"><span class="comment">//因为size()+front会有可能超出maxSize的范围</span></span><br><span class="line">System.out.println(<span class="string">"a["</span>+i%maxSize+<span class="string">"]"</span>+arr[i%maxSize]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回该队列中有多少个有效的个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//因为是环形的队列，所以rear可能小于front</span></span><br><span class="line"><span class="keyword">return</span> (rear+maxSize-front)%maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列的头数据，注意不是取出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isNull()) &#123;</span><br><span class="line">System.out.println(<span class="string">"队列为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-链表"><a href="#4-链表" class="headerlink" title="4.链表"></a>4.链表</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>1）链表是以节点的方式来存储（链式存储）</p><p>2）每个节点包含data域（存放数据），next域（指向下一个节点）</p><p>3）链表的各个节点不一定是连续存储</p><p>4）链表分为带有头节点的链表和没有头节点的链表（根据实际情况在确定）</p><p>5）头节点不存放具体的数据，表示单链表的头</p><p>如图所示是模拟链表在内存中的存储的位置；</p><p><img src="/2020/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1590889623771.png" alt="1590889623771"></p><p>下图是带头节点的单链表逻辑结构：</p><p><img src="/2020/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1590889993945.png" alt="1590889993945"></p><h3 id="2-单链表的应用实例"><a href="#2-单链表的应用实例" class="headerlink" title="2.单链表的应用实例"></a>2.单链表的应用实例</h3><p>水浒英雄排行榜（对英雄人物进行增删改查的操作）：</p><p><strong>水浒英雄类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个英雄class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String nickName;</span><br><span class="line"><span class="keyword">private</span> HeroNode next;<span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span> <span class="params">(<span class="keyword">int</span> no,String name,String nickName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.no = no;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get，set和toString方法没有展示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.添加</strong></p><ul><li>先创建一个head的头节点，作用就是表示单链表的头</li><li>每添加一个节点，就直接加入到链表的最后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.添加节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode heroNode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//思路：当不考虑顺序的时候，找到当前链表的最后一个节点，将最后一个节点的next的区域指向新的节点</span></span><br><span class="line">    <span class="comment">//因为head节点不能动，因此我们需要一个辅助的指针</span></span><br><span class="line">    <span class="comment">//temp引用的是head对象</span></span><br><span class="line">    HeroNode temp = head;</span><br><span class="line">    <span class="comment">//遍历链表，找到最后</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">//判断是不是链表的最后一个节点</span></span><br><span class="line">        <span class="keyword">if</span>(temp.getNext()==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不是最后一个节点，就将temp向后移动</span></span><br><span class="line">        <span class="comment">//temp就引用了下一个对象</span></span><br><span class="line">        temp = temp.getNext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当推出while循环的时候，temp就指出了链表的最后</span></span><br><span class="line">    <span class="comment">//将最后这个节点的next指向新的节点</span></span><br><span class="line">    temp.setNext(heroNode); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.遍历：</strong></p><ul><li>通过一个辅助遍历，帮助遍历整个链表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链表的遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span> (head.getNext() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要一个辅助节点进行遍历</span></span><br><span class="line">HeroNode temp = head.getNext();</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//判断是不是链表的最后一个节点</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//后移</span></span><br><span class="line">temp = temp.getNext();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.根据编号的大小顺序添加数据</strong>：</p><ul><li>首先找到新添加的节点的位置，通过一个辅助的变量</li><li>新的节点的next = temp.getNext();</li><li>将temp.setNext() = 新的节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二种添加英雄的模式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line"><span class="comment">//通过一个辅助的指针来找到添加的位置</span></span><br><span class="line">HeroNode temp = head;</span><br><span class="line"><span class="comment">//这个是单链表，因此我们找的temp是位于添加位置的前一个位置</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//标识添加的编号是否存在</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (temp.getNext() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//已经在链表的最后了</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (temp.getNext().getNo()&gt;heroNode.getNo()) &#123;</span><br><span class="line"><span class="comment">//找到位置</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.getNext().getNo()==heroNode.getNo())&#123;</span><br><span class="line"><span class="comment">//说明这个位置已经添加了</span></span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后移动</span></span><br><span class="line">temp = temp.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">System.out.println(<span class="string">"准备插入的英雄已经存在"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">heroNode.setNext(temp.getNext());</span><br><span class="line">temp.setNext(heroNode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.修改数据</strong></p><p>思路：</p><ul><li><p>先判断是不是为空</p></li><li><p>遍历找到需要修改的节点</p></li><li><p>如果找到就修改，找不到就提示</p></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改节点的信息</span></span><br><span class="line"><span class="comment">//根据newHeroNode的no进行修改</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode newHeroNode)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断是不是空</span></span><br><span class="line">    <span class="keyword">if</span>(head.getNext() == <span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"链表为空"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到需要修改的节点，根据no编号</span></span><br><span class="line">    <span class="comment">//定义一个辅助的变量</span></span><br><span class="line">    HeroNode temp = head.getNext();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//因为以后到了最后，没有数据了</span></span><br><span class="line">            System.out.println(<span class="string">"没有找到这个"</span>);</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//链表的最后</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp.getNo() == newHeroNode.getNo())&#123;</span><br><span class="line">            temp.setName(newHeroNode.getName());</span><br><span class="line">            temp.setNickName(newHeroNode.getNickName());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.getNext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.删除数据</strong></p><p>思路：</p><ul><li>1.先判断是不是为空</li><li>2.先找到需要删除的前一个节点</li><li>3.temp.next = temp,next.next; 该删除的节点，将不会被其他的引用，被垃圾回收机制删除</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.进行辅助节点</span></span><br><span class="line">    HeroNode temp = head;</span><br><span class="line">    <span class="comment">//2。循环遍历</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (temp.getNext() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"没有找到这个数据"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断后面那个节点是不是和No的值相等</span></span><br><span class="line">        <span class="keyword">if</span> (temp.getNext().getNo() == n) &#123;</span><br><span class="line">            temp.setNext(temp.getNext().getNext());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.getNext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.有效的节点的个数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取到单链表的有效的节点个数(如果是带头结点的这个链表，需要不统计头结点)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> heroNode :链表的头结点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回就是节点的个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义一个辅助的变量</span></span><br><span class="line">    HeroNode cur = heroNode.getNext();</span><br><span class="line">    <span class="keyword">while</span> (cur!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        length++;</span><br><span class="line">        cur = cur.getNext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7.查找单链表中的倒数第K个节点</strong></p><p>7.1思路</p><ul><li>编写一个方法，接受Head节点，同时接收一个index</li><li>index表示是倒数第index个节点</li><li>先把链表从头到尾边里，得到链表的总的长度</li><li>在得到size后，我们从链表的第一个开始遍历（size-index）</li></ul><p>7.2代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HeroNode <span class="title">findLastNode</span><span class="params">(HeroNode head,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断如果链表为空</span></span><br><span class="line">    <span class="keyword">if</span>(head.getNext()==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到链表的长度</span></span><br><span class="line">    <span class="keyword">int</span> size = getLength(head);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (index&lt;=<span class="number">0</span>||index&gt;size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个辅助变量</span></span><br><span class="line">    HeroNode cur = head.getNext();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size-index;i++)&#123;</span><br><span class="line">        cur = cur.getNext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8.反转单链表</strong></p><p>8.1思路</p><ul><li>定义一个节点reverseHead = new HeroNode();</li><li>从头到尾遍历原来的链表，每遍历一个节点，将其取出，并放在新的链表的最前端</li><li>原来的链表的head.next = reverHead.next </li></ul><p>8.2代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HeroNode <span class="title">fan</span><span class="params">(HeroNode heroNode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断这个链表是不是为空，或者只有一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (heroNode.getNext() == <span class="keyword">null</span>||heroNode.getNext().getNext()==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> heroNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义一个辅助的指针（变量）</span></span><br><span class="line">    HeroNode cur = heroNode.getNext();</span><br><span class="line">    HeroNode next = <span class="keyword">null</span>;<span class="comment">//只想当前链表的下一个</span></span><br><span class="line">    HeroNode reverseHead  = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//便利</span></span><br><span class="line">    <span class="keyword">while</span> (cur!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//保存下一个节点，因为后面需要使</span></span><br><span class="line">        next = cur.getNext();</span><br><span class="line"></span><br><span class="line">        cur.setNext(reverseHead.getNext());</span><br><span class="line">        reverseHead.setNext(cur);</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    heroNode.setNext(reverseHead.getNext());</span><br><span class="line">    <span class="keyword">return</span> heroNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>9.从头到尾打印</strong></p><p>9.1思路</p><p>方法一：</p><ul><li>先反转，在遍历，这样做的问题就是会破坏原来单链表的结构（不建议）</li></ul><p>方法二：</p><ul><li>可以利用栈这个数据结构，将各个节点压入<strong>栈</strong>中，利用栈的<strong>先进后出</strong>的特点，就实现了逆序打印的效果。</li></ul><p>9.2代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reversePrint</span><span class="params">(HeroNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个栈，将数据放入</span></span><br><span class="line">    Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> Stack&lt;HeroNode&gt;();</span><br><span class="line">    HeroNode cur = head.getNext();</span><br><span class="line">    <span class="comment">//将链表中的所有节点压入栈中</span></span><br><span class="line">    <span class="keyword">while</span>(cur !=<span class="keyword">null</span>)&#123;</span><br><span class="line">        stack.push(cur);</span><br><span class="line">        cur = cur.getNext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (stack.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//出栈</span></span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第一个博客</title>
    <link href="http://yoursite.com/2020/06/08/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2020/06/08/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-06-08T09:30:58.000Z</published>
    <updated>2020-06-13T02:18:18.432Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="note default">            <p>default 提示塊標籤</p>          </div>     <div id="aplayer-jAIbrhCd" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="882154509" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#49A6F9" data-volume="0.5"></div><div class="note primary no-icon">            <p>primary 提示塊標籤</p>          </div><div class="note success">            <p>success 提示塊標籤</p>          </div><div class="note info">            <p>info 提示塊標籤</p>          </div><div class="note warning">            <p>warning 提示塊標籤</p>          </div><div class="note danger">            <p>danger 提示塊標籤</p>          </div><p>图片：</p><div class="justified-gallery"><p><img src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-scary-pumpkin-hand-900x600.jpg" alt><br><img src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-fresh-fish-dinner-900x600.jpg" alt><br><img src="https://gratisography.com/wp-content/uploads/2019/10/gratisography-mountain-cloud-landscape-900x600.jpg" alt><br><img src="https://picjumbo.com/wp-content/uploads/iphone-free-stock-photos-2210x3315.jpg" alt><br><img src="https://picjumbo.com/wp-content/uploads/young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg" alt><br><img src="https://picjumbo.com/wp-content/uploads/modern-graphic-designer-essentials_free_stock_photos_picjumbo_HNCK4919-2210x1474.jpg" alt></p>          </div>]]></content>
    
    <summary type="html">
    
      展示博客技术
    
    </summary>
    
    
    
      <category term="实验" scheme="http://yoursite.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/06/04/hello-world/"/>
    <id>http://yoursite.com/2020/06/04/hello-world/</id>
    <published>2020-06-04T07:13:57.580Z</published>
    <updated>2020-06-04T07:13:57.580Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
